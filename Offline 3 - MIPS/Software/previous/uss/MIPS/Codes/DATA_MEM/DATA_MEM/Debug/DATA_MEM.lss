
DATA_MEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  00000172  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006cc  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d4  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ac  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000114c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035e  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010d  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000015db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

unsigned char memArr[16];

int main(void)
{
	MCUCSR|=(1<<JTD);
  7c:	84 b7       	in	r24, 0x34	; 52
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	
	
	DDRA=0XFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x00;
  8c:	17 ba       	out	0x17, r1	; 23
	DDRC=0x00;
  8e:	14 ba       	out	0x14, r1	; 20
	DDRD=0x0F;
  90:	8f e0       	ldi	r24, 0x0F	; 15
  92:	81 bb       	out	0x11, r24	; 17
  94:	e0 e6       	ldi	r30, 0x60	; 96
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	20 e7       	ldi	r18, 0x70	; 112
  9a:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int dataout;
	unsigned int b;
	unsigned int d;
	
	for(int i=0; i<16; i++){
		memArr[i]=13;
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	81 93       	st	Z+, r24
	unsigned int addr;
	unsigned int dataout;
	unsigned int b;
	unsigned int d;
	
	for(int i=0; i<16; i++){
  a0:	e2 17       	cp	r30, r18
  a2:	f3 07       	cpc	r31, r19
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x22>
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f0 e0       	ldi	r31, 0x00	; 0
		memArr[i]=13;
	}
	
	while (1)
	{
		b = PINB ;
  aa:	36 b3       	in	r19, 0x16	; 22
		writedata = b>>4;
		addr = b%16;
  ac:	83 2f       	mov	r24, r19
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	90 e0       	ldi	r25, 0x00	; 0
		d = PIND;
  b2:	60 b3       	in	r22, 0x10	; 16
		prevclk = currclk;
		currclk = (d & 0b01000000)>>6;
  b4:	66 fb       	bst	r22, 6
  b6:	44 27       	eor	r20, r20
  b8:	40 f9       	bld	r20, 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
		memread = (d & 0b00100000)>>5;
		memwrite= (d & 0b00010000)>>4;
		
		dataout = memArr[addr];
  bc:	dc 01       	movw	r26, r24
  be:	a0 5a       	subi	r26, 0xA0	; 160
  c0:	bf 4f       	sbci	r27, 0xFF	; 255
		
		//if(mem2reg==1) PORTA = dataout;
		//else PORTA = addr;
		
		PORTD = (dataout & 0b00001111);
  c2:	2c 91       	ld	r18, X
  c4:	2f 70       	andi	r18, 0x0F	; 15
  c6:	22 bb       	out	0x12, r18	; 18
		
		if(prevclk==0 && currclk==1 && memwrite==1){
  c8:	ef 2b       	or	r30, r31
  ca:	79 f4       	brne	.+30     	; 0xea <main+0x6e>
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	51 05       	cpc	r21, r1
  d0:	61 f4       	brne	.+24     	; 0xea <main+0x6e>
  d2:	64 ff       	sbrs	r22, 4
  d4:	0a c0       	rjmp	.+20     	; 0xea <main+0x6e>
			memArr[addr] = writedata;
  d6:	fd 01       	movw	r30, r26
  d8:	23 2f       	mov	r18, r19
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	32 95       	swap	r19
  de:	22 95       	swap	r18
  e0:	2f 70       	andi	r18, 0x0F	; 15
  e2:	23 27       	eor	r18, r19
  e4:	3f 70       	andi	r19, 0x0F	; 15
  e6:	23 27       	eor	r18, r19
  e8:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	83 ec       	ldi	r24, 0xC3	; 195
  ec:	99 e0       	ldi	r25, 0x09	; 9
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x72>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x78>
  f4:	00 00       	nop
		b = PINB ;
		writedata = b>>4;
		addr = b%16;
		d = PIND;
		prevclk = currclk;
		currclk = (d & 0b01000000)>>6;
  f6:	fa 01       	movw	r30, r20
  f8:	d8 cf       	rjmp	.-80     	; 0xaa <main+0x2e>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
