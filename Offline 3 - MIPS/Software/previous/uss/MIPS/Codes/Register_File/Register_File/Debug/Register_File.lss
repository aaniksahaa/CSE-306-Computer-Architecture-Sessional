
Register_File.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  000001d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000734  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d4  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002da  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e8  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:



int main(void)
{
	MCUCSR|=(1<<JTD);
  7c:	84 b7       	in	r24, 0x34	; 52
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	
	
	DDRA=0XFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x00;
  8c:	17 ba       	out	0x17, r1	; 23
	DDRC=0x00;
  8e:	14 ba       	out	0x14, r1	; 20
	DDRD=0x00;
  90:	11 ba       	out	0x11, r1	; 17
  92:	e1 e6       	ldi	r30, 0x61	; 97
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8e e0       	ldi	r24, 0x0E	; 14
	
	for(int i=1; i<16; i++){
		regArr[i]=15-i;
  98:	81 93       	st	Z+, r24
  9a:	81 50       	subi	r24, 0x01	; 1
  9c:	e8 f7       	brcc	.-6      	; 0x98 <main+0x1c>
	}
	regArr[0]=0;
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
	regArr[6]=15;
  a4:	8f e0       	ldi	r24, 0x0F	; 15
  a6:	86 83       	std	Z+6, r24	; 0x06
	
	int currclk=0;
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	60 e7       	ldi	r22, 0x70	; 112
  ae:	70 e0       	ldi	r23, 0x00	; 0
	int reset;
	int prevclk=0;
	
	while (1)
	{
		int b = PINB;
  b0:	a6 b3       	in	r26, 0x16	; 22
		int muxout = b%16;
		int reg2 = b>>4;
		int d = PIND;
  b2:	10 b3       	in	r17, 0x10	; 16
		int reg1 = d%16;
		int flg = PINC;
  b4:	83 b3       	in	r24, 0x13	; 19
		prevclk = currclk;
		currclk = (flg & 0b0001);
  b6:	48 2f       	mov	r20, r24
  b8:	41 70       	andi	r20, 0x01	; 1
  ba:	50 e0       	ldi	r21, 0x00	; 0
		regwrite = (flg & 0b0010)>>1;
		showreg = (flg & 0b0100)>>2;
		reset = (flg & 0b1000)>>3;
		int wb = flg>>4;
		
		if(showreg==1){
  bc:	82 ff       	sbrs	r24, 2
  be:	09 c0       	rjmp	.+18     	; 0xd2 <main+0x56>
			int in1 = PIND>>4;
  c0:	e0 b3       	in	r30, 0x10	; 16
			PORTA = regArr[in1];
  c2:	e2 95       	swap	r30
  c4:	ef 70       	andi	r30, 0x0F	; 15
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	e0 5a       	subi	r30, 0xA0	; 160
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	80 81       	ld	r24, Z
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	3b c0       	rjmp	.+118    	; 0x148 <main+0xcc>
		}
		else{
			if(reset==1){
  d2:	83 ff       	sbrs	r24, 3
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <main+0x68>
  d6:	e0 e6       	ldi	r30, 0x60	; 96
  d8:	f0 e0       	ldi	r31, 0x00	; 0
				for(int i=0; i<16; i++){
					regArr[i]=0;
  da:	11 92       	st	Z+, r1
			int in1 = PIND>>4;
			PORTA = regArr[in1];
		}
		else{
			if(reset==1){
				for(int i=0; i<16; i++){
  dc:	e6 17       	cp	r30, r22
  de:	f7 07       	cpc	r31, r23
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x5e>
  e2:	32 c0       	rjmp	.+100    	; 0x148 <main+0xcc>
	int reset;
	int prevclk=0;
	
	while (1)
	{
		int b = PINB;
  e4:	b0 e0       	ldi	r27, 0x00	; 0
				for(int i=0; i<16; i++){
					regArr[i]=0;
				}
			}
			else{
				PORTA = ( (regArr[reg2]<< 4) | regArr[reg1]%16)%256;
  e6:	9d 01       	movw	r18, r26
  e8:	35 95       	asr	r19
  ea:	27 95       	ror	r18
  ec:	35 95       	asr	r19
  ee:	27 95       	ror	r18
  f0:	35 95       	asr	r19
  f2:	27 95       	ror	r18
  f4:	35 95       	asr	r19
  f6:	27 95       	ror	r18
  f8:	20 5a       	subi	r18, 0xA0	; 160
  fa:	3f 4f       	sbci	r19, 0xFF	; 255
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	f0 e1       	ldi	r31, 0x10	; 16
 102:	2f 9f       	mul	r18, r31
 104:	90 01       	movw	r18, r0
 106:	11 24       	eor	r1, r1
 108:	e1 2f       	mov	r30, r17
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ef 70       	andi	r30, 0x0F	; 15
 10e:	f0 78       	andi	r31, 0x80	; 128
 110:	e0 5a       	subi	r30, 0xA0	; 160
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	90 81       	ld	r25, Z
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	29 2b       	or	r18, r25
 11a:	30 78       	andi	r19, 0x80	; 128
 11c:	2b bb       	out	0x1b, r18	; 27
				if(prevclk==0 && currclk == 1 && regwrite){
 11e:	cd 2b       	or	r28, r29
 120:	99 f4       	brne	.+38     	; 0x148 <main+0xcc>
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	51 05       	cpc	r21, r1
 126:	81 f4       	brne	.+32     	; 0x148 <main+0xcc>
 128:	81 ff       	sbrs	r24, 1
 12a:	0e c0       	rjmp	.+28     	; 0x148 <main+0xcc>
					regArr[muxout] = wb;
 12c:	af 70       	andi	r26, 0x0F	; 15
 12e:	b0 78       	andi	r27, 0x80	; 128
 130:	a0 5a       	subi	r26, 0xA0	; 160
 132:	bf 4f       	sbci	r27, 0xFF	; 255
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	95 95       	asr	r25
 138:	87 95       	ror	r24
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	95 95       	asr	r25
 140:	87 95       	ror	r24
 142:	95 95       	asr	r25
 144:	87 95       	ror	r24
 146:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	83 ec       	ldi	r24, 0xC3	; 195
 14a:	99 e0       	ldi	r25, 0x09	; 9
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0xd0>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xd6>
 152:	00 00       	nop
		int reg2 = b>>4;
		int d = PIND;
		int reg1 = d%16;
		int flg = PINC;
		prevclk = currclk;
		currclk = (flg & 0b0001);
 154:	ea 01       	movw	r28, r20
 156:	ac cf       	rjmp	.-168    	; 0xb0 <main+0x34>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
