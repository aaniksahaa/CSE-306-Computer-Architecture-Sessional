
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000595  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031e  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000160  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000171d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

 int main(void)
 {
	 // JTAG is being enabled so that C pins may be used for general IO correctly
	 
	 MCUCSR |= (1<<JTD);
  6c:	84 b7       	in	r24, 0x34	; 52
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	84 bf       	out	0x34, r24	; 52
	 MCUCSR |= (1<<JTD);		// JTAG needs to be enabled twice
  72:	84 b7       	in	r24, 0x34	; 52
  74:	80 68       	ori	r24, 0x80	; 128
  76:	84 bf       	out	0x34, r24	; 52
	 
	 DDRA=0b11111111;	// all A pins configured as output
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	8a bb       	out	0x1a, r24	; 26
	 DDRB=0b00000000;	// all B pins configured as input
  7c:	17 ba       	out	0x17, r1	; 23
	 DDRC=0b00000000;	// all C pins configured as input
  7e:	14 ba       	out	0x14, r1	; 20
	 DDRD=0b00000000;	// all D pins configured as input
  80:	11 ba       	out	0x11, r1	; 17

	 PORTA = 0b00000001;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	8b bb       	out	0x1b, r24	; 27
	 int register1_value;
	 int register2_value;
	 
	 int ALUop;
	 
	 int output_value = 0x00;
  86:	e0 e0       	ldi	r30, 0x00	; 0
  88:	f0 e0       	ldi	r31, 0x00	; 0
			 output_value = register1_value | register2_value;
			 output_value = (output_value ^ 15);	// inverting bits
		 }
		 else if (ALUop == j)
		 {
			 output_value = 0;	// this is an arbitrary value
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	a1 2c       	mov	r10, r1
			 output_value = register1_value | register2_value;
		 }
		 else if (ALUop == nor)
		 {
			 output_value = register1_value | register2_value;
			 output_value = (output_value ^ 15);	// inverting bits
  8e:	0f 2e       	mov	r0, r31
  90:	ff e0       	ldi	r31, 0x0F	; 15
  92:	bf 2e       	mov	r11, r31
  94:	f0 2d       	mov	r31, r0
			 ZF = 0;
		 }
		 
		 branch_decision = ( ZF & beqf )|( ( !ZF ) & bneqf );
		 
		 unsigned char out = output_value | (branch_decision<<4);
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
	 int branch_decision;

	 while (1)
	 {
		 // lower 4 bits of PIND denotes ALUop
		 ALUop = PIND & 0x0F;
  9a:	00 b3       	in	r16, 0x10	; 16
		 
		 // lower 4 bits of PINB denotes register1 value
		 register1_value = PINB & 0x0F;
  9c:	86 b3       	in	r24, 0x16	; 22
  9e:	98 2f       	mov	r25, r24
  a0:	9f 70       	andi	r25, 0x0F	; 15
  a2:	e9 2e       	mov	r14, r25
  a4:	f1 2c       	mov	r15, r1
		 
		 // upper 4 bits of PINB denotes register1 value
		 register2_value =  (PINB >> 4);
  a6:	86 b3       	in	r24, 0x16	; 22
  a8:	82 95       	swap	r24
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	28 2f       	mov	r18, r24
  ae:	30 e0       	ldi	r19, 0x00	; 0
		 
		 int flags = PIND;
  b0:	d0 b2       	in	r13, 0x10	; 16
		 
		 // as per the design of control unit, index-4 bit of PIND denotes beqf
		 beqf = (flags & 0b00010000)>>4;
  b2:	d4 fa       	bst	r13, 4
  b4:	44 27       	eor	r20, r20
  b6:	40 f9       	bld	r20, 0
  b8:	50 e0       	ldi	r21, 0x00	; 0
		 
		 // as per the design of control unit, index-5 bit of PIND denotes bneqf
		 bneqf = (flags & 0b00100000)>>5;
  ba:	d5 fa       	bst	r13, 5
  bc:	66 27       	eor	r22, r22
  be:	60 f9       	bld	r22, 0
  c0:	70 e0       	ldi	r23, 0x00	; 0

		 if (ALUop == add || ALUop ==addi || ALUop == lw || ALUop == sw)
  c2:	c0 2f       	mov	r28, r16
  c4:	cb 70       	andi	r28, 0x0B	; 11
  c6:	cb 30       	cpi	r28, 0x0B	; 11
  c8:	21 f0       	breq	.+8      	; 0xd2 <main+0x66>
  ca:	10 2f       	mov	r17, r16
  cc:	1d 70       	andi	r17, 0x0D	; 13
  ce:	14 30       	cpi	r17, 0x04	; 4
  d0:	31 f4       	brne	.+12     	; 0xde <main+0x72>
		 {
			 output_value = (register1_value + register2_value) & 0x0F;
  d2:	f7 01       	movw	r30, r14
  d4:	e2 0f       	add	r30, r18
  d6:	f3 1f       	adc	r31, r19
  d8:	ef 70       	andi	r30, 0x0F	; 15
  da:	ff 27       	eor	r31, r31
  dc:	48 c0       	rjmp	.+144    	; 0x16e <main+0x102>
  de:	0f 70       	andi	r16, 0x0F	; 15
		 }
		 else if (ALUop == sub || ALUop == subi || ALUop == beq || ALUop == bneq)
  e0:	cc 24       	eor	r12, r12
  e2:	ca 94       	dec	r12
  e4:	c0 0e       	add	r12, r16
  e6:	dd 24       	eor	r13, r13
  e8:	d3 94       	inc	r13
  ea:	dc 14       	cp	r13, r12
  ec:	10 f4       	brcc	.+4      	; 0xf2 <main+0x86>
  ee:	c9 30       	cpi	r28, 0x09	; 9
  f0:	31 f4       	brne	.+12     	; 0xfe <main+0x92>
		 {
			 output_value = (register1_value - register2_value +16 ) & 0x0F;
  f2:	f7 01       	movw	r30, r14
  f4:	e2 1b       	sub	r30, r18
  f6:	f3 0b       	sbc	r31, r19
  f8:	ef 70       	andi	r30, 0x0F	; 15
  fa:	ff 27       	eor	r31, r31
  fc:	38 c0       	rjmp	.+112    	; 0x16e <main+0x102>
	 int branch_decision;

	 while (1)
	 {
		 // lower 4 bits of PIND denotes ALUop
		 ALUop = PIND & 0x0F;
  fe:	20 2f       	mov	r18, r16
 100:	30 e0       	ldi	r19, 0x00	; 0
		 }
		 else if (ALUop == sub || ALUop == subi || ALUop == beq || ALUop == bneq)
		 {
			 output_value = (register1_value - register2_value +16 ) & 0x0F;
		 }
		 else if (ALUop == sll)
 102:	25 30       	cpi	r18, 0x05	; 5
 104:	31 05       	cpc	r19, r1
 106:	49 f4       	brne	.+18     	; 0x11a <main+0xae>
		 {
			 output_value = register1_value << register2_value;
 108:	f7 01       	movw	r30, r14
 10a:	02 c0       	rjmp	.+4      	; 0x110 <main+0xa4>
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	8a 95       	dec	r24
 112:	e2 f7       	brpl	.-8      	; 0x10c <main+0xa0>
			 output_value &= 0x0F;
 114:	ef 70       	andi	r30, 0x0F	; 15
 116:	ff 27       	eor	r31, r31
 118:	2a c0       	rjmp	.+84     	; 0x16e <main+0x102>
		 }
		 else if (ALUop == srl)
 11a:	21 15       	cp	r18, r1
 11c:	31 05       	cpc	r19, r1
 11e:	39 f4       	brne	.+14     	; 0x12e <main+0xc2>
		 {
			 output_value = register1_value >> register2_value;
 120:	f7 01       	movw	r30, r14
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0xbc>
 124:	f5 95       	asr	r31
 126:	e7 95       	ror	r30
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <main+0xb8>
 12c:	20 c0       	rjmp	.+64     	; 0x16e <main+0x102>
		 }
		 else if (ALUop == and || ALUop == andi)
 12e:	e0 2e       	mov	r14, r16
 130:	f1 2c       	mov	r15, r1
 132:	c7 e0       	ldi	r28, 0x07	; 7
 134:	ec 1a       	sub	r14, r28
 136:	f1 08       	sbc	r15, r1
 138:	c2 e0       	ldi	r28, 0x02	; 2
 13a:	ec 16       	cp	r14, r28
 13c:	f1 04       	cpc	r15, r1
 13e:	20 f4       	brcc	.+8      	; 0x148 <main+0xdc>
		 {
			 output_value = register1_value & register2_value;
 140:	89 23       	and	r24, r25
 142:	e8 2f       	mov	r30, r24
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	13 c0       	rjmp	.+38     	; 0x16e <main+0x102>
		 }
		 else if (ALUop == or || ALUop == ori)
 148:	1c 30       	cpi	r17, 0x0C	; 12
 14a:	21 f4       	brne	.+8      	; 0x154 <main+0xe8>
		 {
			 output_value = register1_value | register2_value;
 14c:	89 2b       	or	r24, r25
 14e:	e8 2f       	mov	r30, r24
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	0d c0       	rjmp	.+26     	; 0x16e <main+0x102>
		 }
		 else if (ALUop == nor)
 154:	23 30       	cpi	r18, 0x03	; 3
 156:	31 05       	cpc	r19, r1
 158:	29 f4       	brne	.+10     	; 0x164 <main+0xf8>
		 {
			 output_value = register1_value | register2_value;
			 output_value = (output_value ^ 15);	// inverting bits
 15a:	e9 2f       	mov	r30, r25
 15c:	e8 2b       	or	r30, r24
 15e:	eb 25       	eor	r30, r11
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	05 c0       	rjmp	.+10     	; 0x16e <main+0x102>
		 }
		 else if (ALUop == j)
 164:	2a 30       	cpi	r18, 0x0A	; 10
 166:	31 05       	cpc	r19, r1
 168:	11 f4       	brne	.+4      	; 0x16e <main+0x102>
		 {
			 output_value = 0;	// this is an arbitrary value
 16a:	ed 2f       	mov	r30, r29
 16c:	fa 2d       	mov	r31, r10
		 }

		 if (output_value%16 == 0)
 16e:	7f 01       	movw	r14, r30
 170:	8f e0       	ldi	r24, 0x0F	; 15
 172:	e8 22       	and	r14, r24
 174:	ff 24       	eor	r15, r15
			 ZF = 0;
		 }
		 
		 branch_decision = ( ZF & beqf )|( ( !ZF ) & bneqf );
		 
		 unsigned char out = output_value | (branch_decision<<4);
 176:	8b 2f       	mov	r24, r27
 178:	9a 2f       	mov	r25, r26
 17a:	e1 14       	cp	r14, r1
 17c:	f1 04       	cpc	r15, r1
 17e:	11 f0       	breq	.+4      	; 0x184 <main+0x118>
 180:	8d 2f       	mov	r24, r29
 182:	9a 2d       	mov	r25, r10
 184:	9c 01       	movw	r18, r24
 186:	24 23       	and	r18, r20
 188:	35 23       	and	r19, r21
 18a:	8b 2f       	mov	r24, r27
 18c:	9a 2f       	mov	r25, r26
 18e:	ef 28       	or	r14, r15
 190:	11 f4       	brne	.+4      	; 0x196 <main+0x12a>
 192:	8d 2f       	mov	r24, r29
 194:	9a 2d       	mov	r25, r10
 196:	86 23       	and	r24, r22
 198:	97 23       	and	r25, r23
 19a:	82 2b       	or	r24, r18
 19c:	93 2b       	or	r25, r19
 19e:	82 95       	swap	r24
 1a0:	92 95       	swap	r25
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	98 27       	eor	r25, r24
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	98 27       	eor	r25, r24
 1aa:	8e 2b       	or	r24, r30
		 PORTA = out;
 1ac:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	89 e6       	ldi	r24, 0x69	; 105
 1b0:	98 e1       	ldi	r25, 0x18	; 24
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x146>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x14c>
 1b8:	00 00       	nop
 1ba:	6f cf       	rjmp	.-290    	; 0x9a <main+0x2e>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
