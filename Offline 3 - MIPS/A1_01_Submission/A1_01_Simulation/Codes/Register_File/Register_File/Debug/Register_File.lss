
Register_File.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  000001b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070b  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ce  00000000  00000000  00000f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e9  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c0  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000017a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

int main(void)
{
	// JTAG is being enabled so that C pins may be used for general IO correctly
	
	MCUCSR|=(1<<JTD);
  7c:	84 b7       	in	r24, 0x34	; 52
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);	// JTAG needs to be enabled twice
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	
	
	DDRA=0b11111111;	// all A pins configured as output
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0b00000000;	// all B pins configured as input
  8c:	17 ba       	out	0x17, r1	; 23
	DDRC=0b00000000;	// all C pins configured as input
  8e:	14 ba       	out	0x14, r1	; 20
	DDRD=0b00000000;	// all D pins configured as input
  90:	11 ba       	out	0x11, r1	; 17
  92:	e1 e6       	ldi	r30, 0x61	; 97
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	40 e7       	ldi	r20, 0x70	; 112
  98:	50 e0       	ldi	r21, 0x00	; 0
	
	for(int i=1; i<16; i++){
		// register_array[i]=15-i;
		register_array[i] = 0;
  9a:	11 92       	st	Z+, r1
	DDRA=0b11111111;	// all A pins configured as output
	DDRB=0b00000000;	// all B pins configured as input
	DDRC=0b00000000;	// all C pins configured as input
	DDRD=0b00000000;	// all D pins configured as input
	
	for(int i=1; i<16; i++){
  9c:	e4 17       	cp	r30, r20
  9e:	f5 07       	cpc	r31, r21
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x1e>
		// register_array[i]=15-i;
		register_array[i] = 0;
	}
	
	// initializing the $zero register as zero constant
	register_array[0]=0;
  a2:	e0 e6       	ldi	r30, 0x60	; 96
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	
	// initializing the $sp register as highest address F(15)
	register_array[6]=15;
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	86 83       	std	Z+6, r24	; 0x06
	
	int previous_level = 0;
	int current_level = 0;
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	d0 e0       	ldi	r29, 0x00	; 0
	int show_register;
	int reset;
	
	while (1)
	{
		int b = PINB;
  b0:	16 b3       	in	r17, 0x16	; 22
		int write_address = b & 0x0F;
		
		// register2_address is inputted through the upper 4 bits of PINB
		int register2_address = b>>4;
		
		int d = PIND;
  b2:	e0 b3       	in	r30, 0x10	; 16
		
		// register1_address is inputted through the lower 4 bits of PIND
		int register1_address = d & 0x0F;
		
		int flags = PINC;
  b4:	83 b3       	in	r24, 0x13	; 19
		
		previous_level = current_level;
		
		// index-0 bit of PINC denotes current_level
		current_level = (flags & 0b0001);
  b6:	28 2f       	mov	r18, r24
  b8:	21 70       	andi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
		
		// write-back value is inputted through the upper 4 bits of PINC
		int wb = flags >> 4;
		
		// we are showing the current-instruction's write-back value instead
		if(show_register == 1){
  bc:	82 fd       	sbrc	r24, 2
  be:	38 c0       	rjmp	.+112    	; 0x130 <main+0xb4>
			// this is always grounded for now
		}
		else{
			if(reset == 1){
  c0:	83 ff       	sbrs	r24, 3
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <main+0x56>
  c4:	e0 e6       	ldi	r30, 0x60	; 96
  c6:	f0 e0       	ldi	r31, 0x00	; 0
				for(int i=0; i<16; i++){
					register_array[i]=0;	// resetting array
  c8:	11 92       	st	Z+, r1
		if(show_register == 1){
			// this is always grounded for now
		}
		else{
			if(reset == 1){
				for(int i=0; i<16; i++){
  ca:	e4 17       	cp	r30, r20
  cc:	f5 07       	cpc	r31, r21
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x4c>
  d0:	2f c0       	rjmp	.+94     	; 0x130 <main+0xb4>
					register_array[i]=0;	// resetting array
				}
			}
			else{
				PORTA = ( (register_array[register2_address]<< 4) | (register_array[register1_address] & 0x0F )) & 0xFF ;
  d2:	a1 2f       	mov	r26, r17
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	b5 95       	asr	r27
  d8:	a7 95       	ror	r26
  da:	b5 95       	asr	r27
  dc:	a7 95       	ror	r26
  de:	b5 95       	asr	r27
  e0:	a7 95       	ror	r26
  e2:	b5 95       	asr	r27
  e4:	a7 95       	ror	r26
  e6:	a0 5a       	subi	r26, 0xA0	; 160
  e8:	bf 4f       	sbci	r27, 0xFF	; 255
  ea:	6c 91       	ld	r22, X
  ec:	90 e1       	ldi	r25, 0x10	; 16
  ee:	69 9f       	mul	r22, r25
  f0:	b0 01       	movw	r22, r0
  f2:	11 24       	eor	r1, r1
  f4:	ef 70       	andi	r30, 0x0F	; 15
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e0 5a       	subi	r30, 0xA0	; 160
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	90 81       	ld	r25, Z
  fe:	9f 70       	andi	r25, 0x0F	; 15
 100:	69 2b       	or	r22, r25
 102:	6b bb       	out	0x1b, r22	; 27
				// detecting rising edge
				if(previous_level==0 && current_level == 1){
 104:	cd 2b       	or	r28, r29
 106:	a1 f4       	brne	.+40     	; 0x130 <main+0xb4>
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	31 05       	cpc	r19, r1
 10c:	89 f4       	brne	.+34     	; 0x130 <main+0xb4>
					// checking if writing is necessary
					if(register_write == 1){
 10e:	81 ff       	sbrs	r24, 1
 110:	0f c0       	rjmp	.+30     	; 0x130 <main+0xb4>
						register_array[write_address] = wb;
 112:	1f 70       	andi	r17, 0x0F	; 15
 114:	e1 2f       	mov	r30, r17
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e0 5a       	subi	r30, 0xA0	; 160
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	95 95       	asr	r25
 120:	87 95       	ror	r24
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24
 12a:	95 95       	asr	r25
 12c:	87 95       	ror	r24
 12e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0xb8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xbe>
 13a:	00 00       	nop
		int flags = PINC;
		
		previous_level = current_level;
		
		// index-0 bit of PINC denotes current_level
		current_level = (flags & 0b0001);
 13c:	e9 01       	movw	r28, r18
 13e:	b8 cf       	rjmp	.-144    	; 0xb0 <main+0x34>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
